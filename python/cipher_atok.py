
a = ord('a')
alphabet = "".join(chr(a+x) for x in range(26)) + "æøå"
del a

class AtoK:
    """
    The "A to K" cipher

    A cipher alphabet is generated by shifting K (or another shift parameter) to the position of A.

    Encoding: each character is looked up in the clear alphabet,
    and the replaced by the corresponding character of the cipher alphabet.

    Decoding: as above, but reversed; Look up the cipher character,
    and replace it with the clear character.
    """
    def __init__(self, k="k"):
        # Number of positions to shift
        self.shift = alphabet.index(k)
        # 
        self.shifted = alphabet[self.shift:] + alphabet[:self.shift]

    def encode_char(self, c:str):
        lc = c.lower()
        if lc in alphabet:
            inx = alphabet.index(lc)
            lcc = self.shifted[inx]
            return lcc if c.islower() else lcc.upper()
        else:
            return c

    def encode(self, s:str) -> str:
        return ''.join(map(self.encode_char, s))

    def alphabets(self):
        return alphabet, self.shifted
